//: Playground - noun: a place where people can play

import UIKit

var x = 10

for index in 1...20{
    let y = index*x--
}


var list = ["eggs", "milk"]
list.append("can")

list += ["dog"]

list += ["cat"]


list[2...3] = ["banana","apple"]


for (index, value) in enumerate(list) {
    println("\(index) - \(value)")
}

var ints = [Int]()

var doubles = [Double](count: 3,repeatedValue: 0.0)

var airports:[String:String] = ["YYZ":"Toronto Pearson", "DUB":"Dublin"]

if let airportName = airports["DUB"]{
    println("\(airportName)")
}

func sayHello(personName:String) -> String{
    let greeting = "Hello, " + personName + "!"
    return greeting
}

println(sayHello("flask"))

func halfOpenRangeLength(#start:Int, #end:Int)->Int{
    return end - start
}

println(halfOpenRangeLength(start:1, end:10))

func join(string s1:String, toString s2:String, withJoiner joiner:String = " ")->String{
    return s1 + joiner + s2
}

println(join(string: "hello", toString: "world"))

func alignRight(var string:String, c:Int, pad:Character) -> String {
    let amountToPad = c - count(string)
    if amountToPad < 1 {
        return string
    }
    let padString = String(pad)
    
    for _ in 1...amountToPad{
        string = padString + string
    }
    return string
}


let paddedString = alignRight("hello", 10, "-")
println(paddedString)


let names = ["chris", "flask", "alex", "ewa", "barry", "apple"]

func backwords(s1:String, s2:String)->Bool{
    return s1>s2
}

var reversed = sorted(names, backwords)

for name in names {
    println(name)
}

reversed = sorted(names, {(s1:String, s2:String)->Bool in return s1 > s2
})

reversed = sorted(names, { s1, s2 in return s1 > s2 }) // by type infference
reversed = sorted(names, { s1, s2 in s1 > s2 })
reversed = sorted(names, { $0 > $1 })
reversed = sorted(names, >) // operator function
reversed = sorted(names){ $0 > $1 } // trailing closure

let digitNames = [
    0:"Zero", 1:"One", 2:"Two", 3:"Three", 4:"Four",
    5:"Five", 6:"Six", 7:"Seven", 8:"Eight", 9:"Nine",
]
let numbers = [16, 58, 510]

// trailing closure example
let strings = numbers.map {
    (var number) -> String in
    var output = ""
    while number > 0 {
        output = digitNames[number%10]! + output
        number /= 10
    }
    return output
}

// Captureing values
func makeIncrementor(forIncrement amount:Int) -> () -> Int {
    var runningTotal = 0
    func incrementor() -> Int{
        runningTotal += amount
        return runningTotal
    }
    return incrementor
}

var incrementByTen = makeIncrementor(forIncrement: 10)

incrementByTen() // 10

incrementByTen() // 20

incrementByTen() // 30

let incrementBySeven = makeIncrementor(forIncrement: 7)

incrementBySeven() // 7

incrementByTen() // 40

// because runningTotal is captured


enum CompassPoint{
    case North
    case South
    case East
    case West
}

enum Planet{
    case Mercury, Venus, Earth, Mars, Jupiter
}

var directionToHead = CompassPoint.West

directionToHead = .East


switch directionToHead{
case .North:
    println("Lots of planets have a north")
case .South:
    println("Watch out for penguins")
case .East:
    println("Where the sun rises")
case .West:
    println("Where the skies are blue")
}

let somePlanet = Planet.Earth

switch somePlanet{
case .Earth:
    println("Mostly harmless")
default:
    print("Not a safe place for humans")
}

// Associated values
enum Barcode {
    case UPCA(Int, Int, Int, Int)
    case QRCode(String)
}

var productBarcode = Barcode.UPCA(8, 85, 512, 3)

productBarcode = .QRCode("ABCEDG")

// raw value

enum ASCIIControlCharacter:Character{
    case Tab = "\t"
    case LineFeed = "\n"
    case CarriageReturn = "\r"
}

enum Planet2: Int{
    case Mercury = 1, Venus, Earth, Mars
}

let earthOrder = Planet2.Earth.rawValue // 3
let possiblePlanet = Planet2(rawValue: 2) // Venus

// Classes and Structures

class SomeClass {
    
}
struct Resolution {
    var width=0
    var height=0
}
class VideoMode{
    var resolution = Resolution()
    var interlaced = false
    var frameRate = 0.0
    var name:String?
}

let someResolution = Resolution()
let someVideoMode = VideoMode()

println("The width of someResolution is\(someResolution.width)")

let vga = Resolution(width: 640, height: 480)

// enum, struct are value type

let hd = Resolution(width: 1920, height: 1080)
var cinema = hd

cinema.width = 2048

println("cinema is now\(cinema.width)")
println("hd is now\(hd.width)")

// === identity to

class DataImporter{
    var fileName = "data.txt"
}

class DataManager{
    lazy var importer = DataImporter() // lazy creation
    var data = [String]()
}

let manager = DataManager()
manager.data.append("some data")
manager.data.append("some more data")

println(manager.importer.fileName) // importer prop has now been created
